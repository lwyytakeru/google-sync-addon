---
# SPDX-FileCopyrightText: (c) 2022 ale5000
# SPDX-License-Identifier: GPL-3.0-or-later

name: "Auto-release from tag"
permissions: {}
on:
  push:
    tags:
      - "v*.*"
  workflow_call:
    inputs:
      tag-name:
        required: true
        type: "string"

jobs:
  release:
    name: "Release"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "${{ startsWith(inputs.tag-name, 'v') || startsWith(github.ref, 'refs/tags/v') }}"
    concurrency:
      group: "${{ github.repository_id }}-${{ github.workflow }}-release"
      cancel-in-progress: false
    permissions:
      contents: write # Needed to create a release
      id-token: write # Needed to attest build provenance
      attestations: write # Needed to attest build provenance

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4
      - name: "Setup Java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Build the flashable OTA zip"
        id: "build"
        shell: bash
        timeout-minutes: 10
        run: |
          # Building...
          make clean buildotaoss
      - name: "Attest build provenance"
        id: "attest"
        uses: actions/attest-build-provenance@v2
        timeout-minutes: 10
        if: "${{ vars.ATTESTATION == 'true' && github.run_attempt == '1' && steps.build.outputs.ZIP_IS_ALPHA == 'false' && steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED == 'true' }}"
        with:
          subject-path: "${{ steps.build.outputs.ZIP_FOLDER }}/*.zip"
          show-summary: false
      - name: "ZIP info"
        id: "info"
        run: |
          # Retrieve informations...
          ZIP_FOLDER='${{ steps.build.outputs.ZIP_FOLDER }}'
          ZIP_FILENAME='${{ steps.build.outputs.ZIP_FILENAME }}'
          ZIP_VERSION='${{ steps.build.outputs.ZIP_VERSION }}'
          ZIP_SHORT_COMMIT_ID='${{ steps.build.outputs.ZIP_SHORT_COMMIT_ID }}'
          ZIP_BUILD_TYPE='${{ steps.build.outputs.ZIP_BUILD_TYPE }}'
          ZIP_BUILD_TYPE_SUPPORTED='${{ steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED }}'
          ZIP_IS_ALPHA='${{ steps.build.outputs.ZIP_IS_ALPHA }}'
          ZIP_SHA256='${{ steps.build.outputs.ZIP_SHA256 }}'
          ZIP_MD5='${{ steps.build.outputs.ZIP_MD5 }}'
          ZIP_ATTESTATION='${{ steps.attest.outputs.attestation-url }}'
          # Displaying informations...
          printf '%s\n' "::notice::Filename: ${ZIP_FILENAME:-Missing}"
          printf '%s\n' "::notice::Version: ${ZIP_VERSION:-Missing}"
          printf '%s\n' "::notice::Short commit ID: ${ZIP_SHORT_COMMIT_ID:-Missing}"
          printf '%s\n' "::notice::Build type: ${ZIP_BUILD_TYPE:?}"
          printf '%s\n' "::notice::Build type supported: ${ZIP_BUILD_TYPE_SUPPORTED:?}"
          printf '%s\n' "::notice::Is alpha: ${ZIP_IS_ALPHA:-Missing}"
          printf '%s\n' "::notice::SHA-256: ${ZIP_SHA256:-Missing}"
          printf '%s\n' "::notice::MD5: ${ZIP_MD5:-Missing}"
          printf '%s\n' "::notice::Attestation: ${ZIP_ATTESTATION:-Missing}"
          : "${ZIP_FOLDER:?}" || exit "${?}"
          # Preparing attestation file...
          old_attest_file='${{ steps.attest.outputs.bundle-path }}'
          if test -n "${old_attest_file?}"; then
            new_attest_file="./.tmp/release-$(basename -- "${old_attest_file:?}")" || exit "${?}"
            mkdir -p -- './.tmp' || exit "${?}"
            cp -f -T -- "${old_attest_file:?}" "${new_attest_file:?}" || exit "${?}"
            printf 'ZIP_ATTESTATION_FILE=%s\n' "${new_attest_file:?}" 1>> "${GITHUB_OUTPUT?}"
          fi
      - name: "Create release"
        uses: softprops/action-gh-release@v2
        if: "${{ github.run_attempt == '1' && steps.build.outputs.ZIP_IS_ALPHA == 'false' && steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED == 'true' }}"
        with:
          name: "${{ inputs.tag-name || github.ref_name }}"
          tag_name: "${{ inputs.tag-name || github.ref_name }}"
          target_commitish: "${{ github.sha }}"
          body: "SHA-256: ${{ steps.build.outputs.ZIP_SHA256 }}\n\nSee the complete [**changelog**](./CHANGELOG.rst)."
          append_body: true
          generate_release_notes: true
          draft: false
          overwrite_files: false
          files: |
            ${{ steps.build.outputs.ZIP_FOLDER }}/*.zip*
            ${{ steps.info.outputs.ZIP_ATTESTATION_FILE }}
          fail_on_unmatched_files: true
